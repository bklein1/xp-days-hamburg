input {
    {#- only if esf log sould be processed #}
    {%- if "log" in LS_INPUT %}

    ################
    # Read esf log #
    ################

    # read from files via pattern
    file {
        path => ["{{ LS_LOG_VOL }}/{{ LS_PATTERN }}"]
        start_position => "beginning"
    }
    {%- endif %}
}

filter {
    {#- only if esf log should be processed #}
    {%- if "log" in LS_INPUT %}

    # exclude empty and whitespace lines
    if [message] != "" and [message] !~ /^[\s]*$/ {

        #######################
        # Add needed metadata #
        #######################

        # add env variables to metadata for debugging
        mutate {
            add_field => {
                "[@metadata][LS_LOG_VOL]" => "{{ LS_LOG_VOL }}"
                "[@metadata][LS_CONFIG_VOL]" => "{{ LS_CONFIG_VOL }}"
                "[@metadata][LS_LOG]" => "{{ LS_LOG }}"
                "[@metadata][LS_CONFIG]" => "{{ LS_CONFIG }}"
                "[@metadata][LS_ENV]" => "{{ LS_ENV }}"
                "[@metadata][LS_CONF]" => "{{ LS_CONF }}"
                "[@metadata][LS_INPUT]" => "{{ LS_INPUT }}"
                "[@metadata][LS_OUTPUT]" => "{{ LS_OUTPUT }}"
                {%- if LS_INFO %}
                "[@metadata][LS_INFO]" => "{{ LS_INFO }}"
                {%- else %}
                "[@metadata][LS_INFO]" => "not used"
                {%- endif %}
                {%- if LS_ERROR %}
                "[@metadata][LS_ERROR]" => "{{ LS_ERROR }}"
                {%- else %}
                "[@metadata][LS_ERROR]" => "not used"
                {%- endif %}
                {%- if ES_TEMPLATE %}
                "[@metadata][ES_TEMPLATE]" => "{{ ES_TEMPLATE }}"
                {%- else %}
                "[@metadata][ES_TEMPLATE]" => "not used"
                {%- endif %}
                {%- if ES_HOSTS %}
                "[@metadata][ES_HOSTS]" => "{{ ES_HOSTS }}"
                {%- else %}
                "[@metadata][ES_HOSTS]" => "not used"
                {%- endif %}
                {%- if ES_USER %}
                "[@metadata][ES_USER]" => "{{ ES_USER }}"
                {%- else %}
                "[@metadata][ES_USER]" => "no auth"
                {%- endif %}
                {%- if ES_PASSWORD %}
                "[@metadata][ES_PASSWORD]" => "{{ ES_PASSWORD }}"
                {%- else %}
                "[@metadata][ES_PASSWORD]" => "no auth"
                {%- endif %}
                {%- if ES_INDEX_ALIAS %}
                "[@metadata][ES_INDEX_ALIAS]" => "{{ ES_INDEX_ALIAS }}"
                {%- else %}
                "[@metadata][ES_INDEX_ALIAS]" => "not used"
                {%- endif %}
                {%- if ES_INDEX %}
                "[@metadata][ES_INDEX]" => "{{ ES_INDEX }}"
                {%- else %}
                "[@metadata][ES_INDEX]" => "not used"
                {%- endif %}
                {%- if ES_DOCUMENT_TYPE %}
                "[@metadata][ES_DOCUMENT_TYPE]" => "{{ ES_DOCUMENT_TYPE }}"
                {%- else %}
                "[@metadata][ES_DOCUMENT_TYPE]" => "not used"
                {%- endif %}
            }
        }

        # extract esf fields from message; the content wrapper
        json { source => "message" }

        ###################################
        # Remove not needed source fields #
        ###################################

        # only if no error tags were created
        if (![tags]) {

            # remove not needed fields from extraction of message
            mutate { remove_field => [ "host", "message", "path", "test_url", "@timestamp", "@version" ] }
        }

        ######################
        # Create document id #
        ######################

        # only if no error tags were created
        if (![tags]) {
            fingerprint {
                target => "[@metadata][ES_DOCUMENT_ID]"
                source => ["epages_repo_id", "env_os", "env_type", "env_identifier", "browser", "class", "method"]
                concatenate_sources => true
                key => "any-long-encryption-key"
                method => "SHA1"    # return the same hash if all values of source fields are equal
            }
        }
    } # end exclude whitespace
    {%- endif %}
}

output {

    {%- if "verbose" in LS_OUTPUT or "console" in LS_OUTPUT %}

    #################################
    # Output for verbose or console #
    #################################

    # print all esf events as pretty json (info and error)
    stdout { codec => rubydebug { metadata => true } }

    {%- endif %}

    {%- if "elasticsearch" in LS_OUTPUT or "document" in LS_OUTPUT or "template" in LS_OUTPUT %}

    ############################
    # Output for elasticsearch #
    ############################

    # only if no error tags were created
    if (![tags]) {

        # push to elasticsearch
        elasticsearch {

           # set connection
           hosts => {{ ES_HOSTS }}

           {%- if ES_USER and ES_PASSWORD %}

           # set credentials
           user => "{{ ES_USER }}"
           password => "{{ ES_PASSWORD }}"
           {%- endif %}

           {%- if "elasticsearch" in LS_OUTPUT or "document" in LS_OUTPUT %}

           # set document path
           index => "{{ ES_INDEX }}"
           document_type => "{{ ES_DOCUMENT_TYPE }}"
           document_id => "%{[@metadata][ES_DOCUMENT_ID]}"
           {%- endif %}
        }
    }
    {%- endif %}

    {%- if "log" in LS_OUTPUT or "info" in LS_OUTPUT %}

    #######################
    # Output for info log #
    #######################

    # only if no error tags were created
    if (![tags]) {

            # log esf events to logstash output data
            file {
                path => "{{ LS_LOG_VOL }}/{{ LS_INFO }}"
                codec => "json"   # cannot be changed
            }
    }
    {%- endif %}

    {%- if "log" in LS_OUTPUT or "error" in LS_OUTPUT %}

    ########################
    # Output for error log #
    ########################

    # if error tags were created during input processing
    if [tags] {

        # log failed esf events to logstash filter errors
        file {
            path => "{{ LS_LOG_VOL }}/{{ LS_ERROR }}"
            codec => "json"    # cannot be changed
        }
    }
    {%- endif %}
}
